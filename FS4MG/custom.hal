### SPINDLE VFD CONFIG ###

# scale for spindle
loadrt scale names=scale-spindle,scale-current
# scale RPM command to VFD units
addf scale-spindle servo-thread

# Scale the current values from the VFD units to A
addf scale-current servo-thread

# 100% frequency is 0x4000 (16384dec). Gain is 0x4000 / max_rpm
# for a 24000 rpm spindle, that means 166384/24000 = 0.683
setp scale-spindle.gain 0.682666666666666666666

# Current reported by VFD is in A/100 -> von 600 ausgehend ist es 0.166[...]7
#Dann sollte ein Wert von
setp scale-current.gain 0.16666666666666666666666666666667

net spindle-speed-command <= spindle.0.speed-out-abs
net spindle-speed-command => scale-spindle.in

# mb2hal inputs require float values
# STW is the status word command (on/off, reverse, etc...)
loadrt conv_s32_float names=conv-STW
addf conv-STW servo-thread


## Fault acknowledge
loadrt edge names=edge-motion-en
addf edge-motion-en servo-thread

setp edge-motion-en.in-edge FALSE
setp edge-motion-en.out-width-ns 500000000 #active for 0.5s

net machine-is-enabled => edge-motion-en.in
net fault-ack edge-motion-en.out


## for writing STW to SINAMICS V20

### Control bits meaning:
# 00 ON/OFF1 : Normal stop
# 01 OFF2: Electr. stop (Low enabled)
# 02 OFF3: Fast stop (Low enabled)
# 03 Pulse enabled
# 04 RFG enabled
# 05 RFG start
# 06 Enable setpoint
# 07 Error acknowledgement
# 08 JOG right
# 09 JOG left
# 10 Controller of AG
# 11 Reversing
# 12 -
# 13 Motor potentiometer higher
# 14 Motor potentiometer lower
# 15 Manual/automatic mode

# Use a weighted sum to converte all bits into a single integer
loadrt weighted_sum wsum_sizes=16
addf process_wsums servo-thread

# Set some constant bits
setp wsum.0.bit.1.in TRUE # second stop function is always on. Might change in the future
setp wsum.0.bit.3.in TRUE # pulse en
setp wsum.0.bit.4.in TRUE # spindle-RFG-en
setp wsum.0.bit.5.in TRUE # RFG start
setp wsum.0.bit.6.in TRUE # en setpoint
setp wsum.0.bit.10.in TRUE # control from PLC

# Connect relevant signals to STW
net spindle-on-off         spindle.0.on => wsum.0.bit.0.in
net machine-is-enabled		   => wsum.0.bit.2.in
net spindle-reverse        spindle.0.reverse => wsum.0.bit.11.in
net fault-ack              => wsum.0.bit.7.in

# convert STW to float for mb2hal
net convert-STW				wsum.0.sum => conv-STW.in

# Spindle speed info conversion
## The value sent back by the VFD is centered around 32768
loadrt offset names=0,1,offset.ntc,offset.temp
addf 0.update-output servo-thread
addf 1.update-output servo-thread

loadrt abs
addf abs.0 servo-thread

loadrt mult2
addf mult2.0 servo-thread

setp 0.offset -32768.0
setp 1.offset -32768.0
setp mult2.0.in1 -1.0

net spindle-info-rpm 0.in
net off-rpm 0.out abs.0.in
net abs-off-rpm abs.0.out 1.in
net corr-rpm 1.out mult2.0.in0

# the true RPM value
net true-rpm mult2.0.out


# Spindle at speed management using spindle info
loadrt near names=spindle-near
addf spindle-near servo-thread

setp spindle-near.scale 1.05
net spindle-speed-command => spindle-near.in1
net true-rpm => spindle-near.in2

net spindle-at-speed spindle.0.at-speed <= spindle-near.out

net spindle-info-current => scale-current.in
net spindle-current-scaled => scale-current.out


#-----------RS485 NTC----------------
loadrt scale names=rs485ntcscale
addf rs485ntcscale servo-thread



